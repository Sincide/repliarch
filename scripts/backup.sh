#!/bin/bash

# Backup Management Script
# Auto-generated by Arch Linux Hyprland Setup Script

set -euo pipefail

# Configuration
BACKUP_BASE_DIR="$HOME/.config-backups"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Print functions
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_usage() {
    echo "Backup Management Script"
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  create [name]           Create a new backup with optional name"
    echo "  list                    List all available backups"
    echo "  restore <backup_dir>    Restore from specified backup directory"
    echo "  delete <backup_dir>     Delete specified backup directory"
    echo "  cleanup [days]          Remove backups older than specified days (default: 30)"
    echo "  info <backup_dir>       Show information about a backup"
    echo "  compare <backup_dir>    Compare backup with current configuration"
    echo ""
    echo "Examples:"
    echo "  $0 create                    # Create backup with timestamp"
    echo "  $0 create pre-theme-change   # Create backup with custom name"
    echo "  $0 restore ~/.config-backups/backup-20250618-140530"
    echo "  $0 cleanup 7                 # Remove backups older than 7 days"
}

# Create backup
create_backup() {
    local backup_name="${1:-$TIMESTAMP}"
    local backup_dir="$BACKUP_BASE_DIR/backup-$backup_name"
    
    print_info "Creating backup: $backup_name"
    
    # Create backup directory
    mkdir -p "$backup_dir"
    
    # Configuration directories to backup
    local config_dirs=(
        ".config/hypr"
        ".config/waybar"  
        ".config/fish"
        ".config/matugen"
        ".config/mako"
        ".config/wofi"
        ".config/kitty"
        ".config/swappy"
        ".config/gtklock"
    )
    
    # Files to backup
    local config_files=(
        ".bashrc"
        ".zshrc"
        ".profile"
    )
    
    # Create manifest
    cat > "$backup_dir/manifest.txt" << EOF
# Backup Manifest
# Created: $(date)
# System: $(uname -a)
# User: $USER

# Directories backed up:
EOF
    
    # Backup configuration directories
    for dir in "${config_dirs[@]}"; do
        if [ -d "$HOME/$dir" ]; then
            print_info "Backing up $dir"
            mkdir -p "$backup_dir/$(dirname "$dir")"
            cp -r "$HOME/$dir" "$backup_dir/$dir" 2>/dev/null || {
                print_warning "Could not backup $dir completely"
            }
            echo "$dir" >> "$backup_dir/manifest.txt"
        fi
    done
    
    # Backup configuration files  
    echo "" >> "$backup_dir/manifest.txt"
    echo "# Files backed up:" >> "$backup_dir/manifest.txt"
    
    for file in "${config_files[@]}"; do
        if [ -f "$HOME/$file" ]; then
            print_info "Backing up $file"
            cp "$HOME/$file" "$backup_dir/$file" 2>/dev/null || {
                print_warning "Could not backup $file"
            }
            echo "$file" >> "$backup_dir/manifest.txt"
        fi
    done
    
    # Backup wallpapers
    if [ -d "$HOME/Pictures/Wallpapers" ]; then
        print_info "Backing up wallpapers"
        mkdir -p "$backup_dir/Pictures"
        cp -r "$HOME/Pictures/Wallpapers" "$backup_dir/Pictures/" 2>/dev/null || {
            print_warning "Could not backup wallpapers completely"
        }
        echo "Pictures/Wallpapers" >> "$backup_dir/manifest.txt"
    fi
    
    # Create metadata
    cat > "$backup_dir/metadata.json" << EOF
{
    "backup_name": "$backup_name",
    "created_at": "$(date -Iseconds)",
    "created_by": "$USER",
    "hostname": "$(hostname)",
    "kernel": "$(uname -r)",
    "script_version": "1.0.0",
    "backup_type": "manual"
}
EOF
    
    # Create size info
    du -sh "$backup_dir" > "$backup_dir/size.txt"
    
    print_success "Backup created successfully: $backup_dir"
    print_info "Backup size: $(cat "$backup_dir/size.txt" | cut -f1)"
}

# List backups
list_backups() {
    print_info "Available backups in $BACKUP_BASE_DIR:"
    echo ""
    
    if [ ! -d "$BACKUP_BASE_DIR" ]; then
        print_warning "No backup directory found"
        return
    fi
    
    # Header
    printf "%-30s %-20s %-10s %-15s\n" "BACKUP NAME" "DATE" "SIZE" "TYPE"
    printf "%s\n" "$(printf '=%.0s' {1..75})"
    
    for backup_dir in "$BACKUP_BASE_DIR"/backup-*; do
        if [ -d "$backup_dir" ]; then
            local backup_name=$(basename "$backup_dir")
            local date_created="N/A"
            local size="N/A"
            local backup_type="manual"
            
            # Get date from metadata if available
            if [ -f "$backup_dir/metadata.json" ]; then
                date_created=$(grep '"created_at"' "$backup_dir/metadata.json" | cut -d'"' -f4 | cut -d'T' -f1)
                backup_type=$(grep '"backup_type"' "$backup_dir/metadata.json" | cut -d'"' -f4)
            fi
            
            # Get size
            if [ -f "$backup_dir/size.txt" ]; then
                size=$(cut -f1 "$backup_dir/size.txt")
            fi
            
            printf "%-30s %-20s %-10s %-15s\n" "$backup_name" "$date_created" "$size" "$backup_type"
        fi
    done
    
    echo ""
    local total_backups=$(find "$BACKUP_BASE_DIR" -name "backup-*" -type d | wc -l)
    print_info "Total backups: $total_backups"
}

# Restore backup
restore_backup() {
    local backup_dir="$1"
    
    if [ ! -d "$backup_dir" ]; then
        print_error "Backup directory not found: $backup_dir"
        return 1
    fi
    
    print_info "Restoring from backup: $(basename "$backup_dir")"
    
    # Create current backup before restore
    print_info "Creating safety backup before restore..."
    create_backup "pre-restore-$TIMESTAMP"
    
    # Read manifest
    if [ ! -f "$backup_dir/manifest.txt" ]; then
        print_error "Backup manifest not found"
        return 1
    fi
    
    # Restore directories and files
    while IFS= read -r line; do
        # Skip comments and empty lines
        [[ "$line" =~ ^#.*$ ]] && continue
        [[ -z "$line" ]] && continue
        
        local item="$line"
        if [ -d "$backup_dir/$item" ]; then
            print_info "Restoring directory: $item"
            mkdir -p "$HOME/$(dirname "$item")"
            rm -rf "$HOME/$item"
            cp -r "$backup_dir/$item" "$HOME/$item"
        elif [ -f "$backup_dir/$item" ]; then
            print_info "Restoring file: $item"
            cp "$backup_dir/$item" "$HOME/$item"
        fi
    done < "$backup_dir/manifest.txt"
    
    # Restart relevant services
    print_info "Restarting services..."
    pkill waybar 2>/dev/null || true
    pkill mako 2>/dev/null || true
    
    sleep 2
    
    waybar -c ~/.config/waybar/config-primary.jsonc -s ~/.config/waybar/style.css &
    waybar -c ~/.config/waybar/config-secondary.jsonc -s ~/.config/waybar/style.css &
    mako &
    
    print_success "Backup restored successfully"
    print_info "Please restart your Hyprland session for all changes to take effect"
}

# Delete backup
delete_backup() {
    local backup_dir="$1"
    
    if [ ! -d "$backup_dir" ]; then
        print_error "Backup directory not found: $backup_dir"
        return 1
    fi
    
    print_warning "Are you sure you want to delete backup: $(basename "$backup_dir")? [y/N]"
    read -r confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        rm -rf "$backup_dir"
        print_success "Backup deleted: $(basename "$backup_dir")"
    else
        print_info "Operation cancelled"
    fi
}

# Cleanup old backups
cleanup_backups() {
    local days="${1:-30}"
    
    print_info "Cleaning up backups older than $days days..."
    
    if [ ! -d "$BACKUP_BASE_DIR" ]; then
        print_warning "No backup directory found"
        return
    fi
    
    local deleted_count=0
    
    find "$BACKUP_BASE_DIR" -name "backup-*" -type d -mtime +$days | while read -r backup_dir; do
        print_info "Deleting old backup: $(basename "$backup_dir")"
        rm -rf "$backup_dir"
        ((deleted_count++))
    done
    
    print_success "Cleanup completed. Deleted $deleted_count old backups"
}

# Show backup info
backup_info() {
    local backup_dir="$1"
    
    if [ ! -d "$backup_dir" ]; then
        print_error "Backup directory not found: $backup_dir"
        return 1
    fi
    
    print_info "Backup Information: $(basename "$backup_dir")"
    echo ""
    
    # Show metadata if available
    if [ -f "$backup_dir/metadata.json" ]; then
        echo "Metadata:"
        cat "$backup_dir/metadata.json" | sed 's/^/  /'
        echo ""
    fi
    
    # Show size
    if [ -f "$backup_dir/size.txt" ]; then
        echo "Size: $(cat "$backup_dir/size.txt" | cut -f1)"
        echo ""
    fi
    
    # Show contents
    echo "Contents:"
    if [ -f "$backup_dir/manifest.txt" ]; then
        grep -v '^#' "$backup_dir/manifest.txt" | grep -v '^$' | sed 's/^/  - /'
    else
        find "$backup_dir" -type f | sed "s|$backup_dir/||" | sed 's/^/  - /'
    fi
}

# Compare backup with current
compare_backup() {
    local backup_dir="$1"
    
    if [ ! -d "$backup_dir" ]; then
        print_error "Backup directory not found: $backup_dir"
        return 1
    fi
    
    print_info "Comparing backup with current configuration..."
    echo ""
    
    if [ ! -f "$backup_dir/manifest.txt" ]; then
        print_error "Backup manifest not found"
        return 1
    fi
    
    while IFS= read -r line; do
        # Skip comments and empty lines
        [[ "$line" =~ ^#.*$ ]] && continue
        [[ -z "$line" ]] && continue
        
        local item="$line"
        
        if [ -d "$backup_dir/$item" ] && [ -d "$HOME/$item" ]; then
            echo "Directory: $item"
            if diff -q "$backup_dir/$item" "$HOME/$item" &>/dev/null; then
                echo "  ✓ Identical"
            else
                echo "  ✗ Different"
            fi
        elif [ -f "$backup_dir/$item" ] && [ -f "$HOME/$item" ]; then
            echo "File: $item"
            if diff -q "$backup_dir/$item" "$HOME/$item" &>/dev/null; then
                echo "  ✓ Identical"
            else
                echo "  ✗ Different"
            fi
        elif [ -e "$backup_dir/$item" ] && [ ! -e "$HOME/$item" ]; then
            echo "Missing: $item"
            echo "  ! Not present in current configuration"
        fi
    done < "$backup_dir/manifest.txt"
}

# Main function
main() {
    case "${1:-}" in
        create)
            create_backup "${2:-}"
            ;;
        list)
            list_backups
            ;;
        restore)
            if [ -z "${2:-}" ]; then
                print_error "Please specify backup directory to restore from"
                exit 1
            fi
            restore_backup "$2"
            ;;
        delete)
            if [ -z "${2:-}" ]; then
                print_error "Please specify backup directory to delete"
                exit 1
            fi
            delete_backup "$2"
            ;;
        cleanup)
            cleanup_backups "${2:-30}"
            ;;
        info)
            if [ -z "${2:-}" ]; then
                print_error "Please specify backup directory"
                exit 1
            fi
            backup_info "$2"
            ;;
        compare)
            if [ -z "${2:-}" ]; then
                print_error "Please specify backup directory to compare"
                exit 1
            fi
            compare_backup "$2"
            ;;
        --help|-h|help)
            print_usage
            ;;
        *)
            print_error "Invalid command: ${1:-}"
            echo ""
            print_usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
