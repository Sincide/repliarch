#!/bin/bash

# Configuration Validation Script
# Auto-generated by Arch Linux Hyprland Setup Script
# Validates all configuration files against their respective syntax requirements

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="$SCRIPT_DIR/../configs"

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Validate Hyprland configuration syntax
validate_hyprland() {
    print_info "Validating Hyprland configuration..."
    
    local hypr_config="$CONFIG_DIR/hypr/hyprland.conf"
    
    if [ ! -f "$hypr_config" ]; then
        print_error "Hyprland config not found: $hypr_config"
        return 1
    fi
    
    # Check for basic syntax requirements
    local errors=0
    
    # Check for required sections
    if ! grep -q "^general {" "$hypr_config"; then
        print_error "Missing 'general' section in hyprland.conf"
        ((errors++))
    fi
    
    if ! grep -q "^decoration {" "$hypr_config"; then
        print_error "Missing 'decoration' section in hyprland.conf"
        ((errors++))
    fi
    
    if ! grep -q "^animations {" "$hypr_config"; then
        print_error "Missing 'animations' section in hyprland.conf"
        ((errors++))
    fi
    
    # Check for proper variable syntax
    if grep -q '\$mainMod.*=' "$hypr_config"; then
        print_success "✓ Variable syntax correct"
    else
        print_error "✗ Missing or incorrect variable syntax"
        ((errors++))
    fi
    
    # Check for proper bind syntax
    if grep -q '^bind.*=' "$hypr_config"; then
        print_success "✓ Bind syntax present"
    else
        print_error "✗ No bind statements found"
        ((errors++))
    fi
    
    if [ $errors -eq 0 ]; then
        print_success "Hyprland configuration syntax validated"
        return 0
    else
        print_error "Hyprland configuration has $errors errors"
        return 1
    fi
}

# Validate Waybar JSON syntax
validate_waybar() {
    print_info "Validating Waybar configuration..."
    
    local primary_config="$CONFIG_DIR/waybar/config-primary.jsonc"
    local secondary_config="$CONFIG_DIR/waybar/config-secondary.jsonc"
    local style_css="$CONFIG_DIR/waybar/style.css"
    
    local errors=0
    
    # Check if files exist
    if [ ! -f "$primary_config" ]; then
        print_error "Primary Waybar config not found: $primary_config"
        ((errors++))
    fi
    
    if [ ! -f "$secondary_config" ]; then
        print_error "Secondary Waybar config not found: $secondary_config"
        ((errors++))
    fi
    
    if [ ! -f "$style_css" ]; then
        print_error "Waybar CSS not found: $style_css"
        ((errors++))
    fi
    
    # Validate JSON syntax (ignoring comments)
    if command -v jq &> /dev/null; then
        for config in "$primary_config" "$secondary_config"; do
            if [ -f "$config" ]; then
                # Remove comments and validate JSON
                if sed 's|//.*||g' "$config" | jq . > /dev/null 2>&1; then
                    print_success "✓ $(basename "$config") JSON syntax valid"
                else
                    print_error "✗ $(basename "$config") JSON syntax invalid"
                    ((errors++))
                fi
            fi
        done
    else
        print_warning "jq not available, skipping JSON validation"
    fi
    
    # Check CSS syntax basics
    if [ -f "$style_css" ]; then
        if grep -q "window#waybar" "$style_css"; then
            print_success "✓ Waybar CSS selectors present"
        else
            print_error "✗ Missing main window selector in CSS"
            ((errors++))
        fi
    fi
    
    if [ $errors -eq 0 ]; then
        print_success "Waybar configuration syntax validated"
        return 0
    else
        print_error "Waybar configuration has $errors errors"
        return 1
    fi
}

# Validate Fish shell configuration
validate_fish() {
    print_info "Validating Fish shell configuration..."
    
    local fish_config="$CONFIG_DIR/fish/config.fish"
    local fish_prompt="$CONFIG_DIR/fish/functions/fish_prompt.fish"
    
    local errors=0
    
    if [ ! -f "$fish_config" ]; then
        print_error "Fish config not found: $fish_config"
        ((errors++))
    fi
    
    if [ ! -f "$fish_prompt" ]; then
        print_error "Fish prompt not found: $fish_prompt"
        ((errors++))
    fi
    
    # Check for basic Fish syntax
    if [ -f "$fish_config" ]; then
        # Check for proper function syntax
        if grep -q "^function " "$fish_config" || grep -q "^if " "$fish_config"; then
            print_success "✓ Fish syntax patterns present"
        else
            print_warning "! No functions found in fish config"
        fi
        
        # Check for proper set commands
        if grep -q "^set " "$fish_config"; then
            print_success "✓ Fish variable syntax present"
        else
            print_warning "! No variable assignments found"
        fi
    fi
    
    # Validate prompt function
    if [ -f "$fish_prompt" ]; then
        if grep -q "^function fish_prompt" "$fish_prompt"; then
            print_success "✓ Fish prompt function syntax correct"
        else
            print_error "✗ Invalid fish_prompt function syntax"
            ((errors++))
        fi
    fi
    
    if [ $errors -eq 0 ]; then
        print_success "Fish shell configuration syntax validated"
        return 0
    else
        print_error "Fish shell configuration has $errors errors"
        return 1
    fi
}

# Validate TOML configuration
validate_matugen() {
    print_info "Validating Matugen configuration..."
    
    local matugen_config="$CONFIG_DIR/matugen/config.toml"
    
    if [ ! -f "$matugen_config" ]; then
        print_error "Matugen config not found: $matugen_config"
        return 1
    fi
    
    # Check for basic TOML syntax
    local errors=0
    
    # Check for required sections
    if grep -q "^\[config\]" "$matugen_config"; then
        print_success "✓ Config section present"
    else
        print_error "✗ Missing [config] section"
        ((errors++))
    fi
    
    if grep -q "^\[\[template\]\]" "$matugen_config"; then
        print_success "✓ Template sections present"
    else
        print_error "✗ Missing [[template]] sections"
        ((errors++))
    fi
    
    # Check for proper TOML syntax with Python if available
    if command -v python3 &> /dev/null; then
        if python3 -c "import tomllib; tomllib.load(open('$matugen_config', 'rb'))" 2>/dev/null; then
            print_success "✓ TOML syntax valid"
        else
            print_error "✗ TOML syntax invalid"
            ((errors++))
        fi
    else
        print_warning "Python3 not available, skipping TOML validation"
    fi
    
    if [ $errors -eq 0 ]; then
        print_success "Matugen configuration syntax validated"
        return 0
    else
        print_error "Matugen configuration has $errors errors"
        return 1
    fi
}

# Validate Kitty configuration
validate_kitty() {
    print_info "Validating Kitty configuration..."
    
    local kitty_config="$CONFIG_DIR/kitty/kitty.conf"
    
    if [ ! -f "$kitty_config" ]; then
        print_error "Kitty config not found: $kitty_config"
        return 1
    fi
    
    local errors=0
    
    # Check for basic Kitty configuration patterns
    if grep -q "^font_family" "$kitty_config"; then
        print_success "✓ Font configuration present"
    else
        print_warning "! No font_family setting found"
    fi
    
    if grep -q "^background_opacity" "$kitty_config"; then
        print_success "✓ Opacity configuration present"
    else
        print_warning "! No background_opacity setting found"
    fi
    
    # Check for color definitions
    if grep -q "^color[0-9]" "$kitty_config"; then
        print_success "✓ Color definitions present"
    else
        print_warning "! No color definitions found"
    fi
    
    if [ $errors -eq 0 ]; then
        print_success "Kitty configuration validated"
        return 0
    else
        print_error "Kitty configuration has $errors errors"
        return 1
    fi
}

# Validate Mako configuration
validate_mako() {
    print_info "Validating Mako configuration..."
    
    local mako_config="$CONFIG_DIR/mako/config"
    
    if [ ! -f "$mako_config" ]; then
        print_error "Mako config not found: $mako_config"
        return 1
    fi
    
    local errors=0
    
    # Check for basic Mako configuration
    if grep -q "^background-color" "$mako_config"; then
        print_success "✓ Background color configuration present"
    else
        print_warning "! No background-color setting found"
    fi
    
    if grep -q "^border-radius" "$mako_config"; then
        print_success "✓ Border radius configuration present"
    else
        print_warning "! No border-radius setting found"
    fi
    
    if [ $errors -eq 0 ]; then
        print_success "Mako configuration validated"
        return 0
    else
        print_error "Mako configuration has $errors errors"
        return 1
    fi
}

# Main validation function
main() {
    print_info "Starting configuration validation..."
    echo ""
    
    local total_errors=0
    
    validate_hyprland || ((total_errors++))
    echo ""
    
    validate_waybar || ((total_errors++))
    echo ""
    
    validate_fish || ((total_errors++))
    echo ""
    
    validate_matugen || ((total_errors++))
    echo ""
    
    validate_kitty || ((total_errors++))
    echo ""
    
    validate_mako || ((total_errors++))
    echo ""
    
    if [ $total_errors -eq 0 ]; then
        print_success "All configurations validated successfully!"
        return 0
    else
        print_error "Validation completed with $total_errors errors"
        return 1
    fi
}

case "${1:-}" in
    --help|-h)
        echo "Configuration Validation Script"
        echo "Usage: $0 [--help]"
        echo "Validates all configuration files for syntax correctness"
        ;;
    *)
        main
        ;;
esac