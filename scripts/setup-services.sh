#!/bin/bash

# Service Setup Script
# Auto-generated by Arch Linux Hyprland Setup Script

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Enable and start essential services
setup_system_services() {
    print_info "Setting up system services..."
    
    # Enable NetworkManager
    if systemctl is-enabled NetworkManager &>/dev/null; then
        print_info "NetworkManager already enabled"
    else
        sudo systemctl enable NetworkManager
        print_success "NetworkManager enabled"
    fi
    
    # Enable Bluetooth if available
    if systemctl list-unit-files | grep -q bluetooth; then
        if systemctl is-enabled bluetooth &>/dev/null; then
            print_info "Bluetooth already enabled"
        else
            sudo systemctl enable bluetooth
            print_success "Bluetooth enabled"
        fi
    fi
    
    # Enable time synchronization
    if systemctl is-enabled systemd-timesyncd &>/dev/null; then
        print_info "Time synchronization already enabled"
    else
        sudo systemctl enable systemd-timesyncd
        print_success "Time synchronization enabled"
    fi
    
    # Enable systemd-resolved for DNS
    if systemctl is-enabled systemd-resolved &>/dev/null; then
        print_info "systemd-resolved already enabled"
    else
        sudo systemctl enable systemd-resolved
        print_success "systemd-resolved enabled"
    fi
}

# Setup PipeWire audio
setup_pipewire() {
    print_info "Setting up PipeWire audio system..."
    
    # Enable PipeWire services for user
    systemctl --user enable pipewire.service
    systemctl --user enable pipewire-pulse.service
    systemctl --user enable wireplumber.service
    
    print_success "PipeWire services enabled"
}

# Setup user services
setup_user_services() {
    print_info "Setting up user services..."
    
    # Create user service directory
    mkdir -p "$HOME/.config/systemd/user"
    
    # Create Hyprland session service
    cat > "$HOME/.config/systemd/user/hyprland-session.target" << 'EOF'
[Unit]
Description=Hyprland session
Documentation=man:systemd.special(7)
BindsTo=graphical-session.target
Wants=graphical-session-pre.target
After=graphical-session-pre.target
EOF
    
    # Create xdg-desktop-portal service
    cat > "$HOME/.config/systemd/user/xdg-desktop-portal-hyprland.service" << 'EOF'
[Unit]
Description=Portal service (Hyprland implementation)
PartOf=graphical-session.target
After=graphical-session.target
ConditionEnvironment=XDG_CURRENT_DESKTOP=Hyprland

[Service]
Type=dbus
BusName=org.freedesktop.impl.portal.desktop.hyprland
ExecStart=/usr/lib/xdg-desktop-portal-hyprland
Restart=on-failure

[Install]
WantedBy=graphical-session.target
EOF
    
    print_success "User services configured"
}

# Setup environment variables
setup_environment() {
    print_info "Setting up environment variables..."
    
    # Create environment file for Hyprland
    cat > "$HOME/.config/environment.d/hyprland.conf" << 'EOF'
# Hyprland Environment Variables
XDG_CURRENT_DESKTOP=Hyprland
XDG_SESSION_DESKTOP=Hyprland
XDG_SESSION_TYPE=wayland

# Qt/GTK Wayland support
QT_QPA_PLATFORM=wayland;xcb
QT_WAYLAND_DISABLE_WINDOWDECORATION=1
GDK_BACKEND=wayland,x11

# Mozilla Wayland support
MOZ_ENABLE_WAYLAND=1

# Java applications
_JAVA_AWT_WM_NONREPARENTING=1

# Cursor theme
XCURSOR_THEME=Adwaita
XCURSOR_SIZE=24

# SDL
SDL_VIDEODRIVER=wayland
EOF
    
    # Create directory if it doesn't exist
    mkdir -p "$HOME/.config/environment.d"
    
    print_success "Environment variables configured"
}

# Setup XDG directories
setup_xdg_directories() {
    print_info "Setting up XDG directories..."
    
    # Create user directories
    mkdir -p "$HOME/Desktop"
    mkdir -p "$HOME/Documents"
    mkdir -p "$HOME/Downloads"
    mkdir -p "$HOME/Music"
    mkdir -p "$HOME/Pictures"
    mkdir -p "$HOME/Videos"
    mkdir -p "$HOME/Templates"
    mkdir -p "$HOME/Public"
    
    # Create XDG config directories
    mkdir -p "$HOME/.config"
    mkdir -p "$HOME/.local/share"
    mkdir -p "$HOME/.local/bin"
    mkdir -p "$HOME/.cache"
    
    # Create Pictures subdirectories
    mkdir -p "$HOME/Pictures/Screenshots"
    mkdir -p "$HOME/Pictures/Wallpapers"
    
    print_success "XDG directories created"
}

# Setup fonts
setup_fonts() {
    print_info "Setting up fonts..."
    
    # Create user fonts directory
    mkdir -p "$HOME/.local/share/fonts"
    
    # Update font cache
    if command -v fc-cache &> /dev/null; then
        fc-cache -fv
        print_success "Font cache updated"
    else
        print_warning "fc-cache not available"
    fi
}

# Main function
main() {
    print_info "Starting service setup..."
    
    setup_system_services
    setup_pipewire
    setup_user_services
    setup_environment
    setup_xdg_directories
    setup_fonts
    
    print_success "Service setup completed successfully"
    print_info "Please reboot or log out and back in for all changes to take effect"
}

case "${1:-}" in
    --help|-h)
        echo "Service Setup Script"
        echo "Usage: $0"
        echo "Sets up essential services for Hyprland desktop environment"
        ;;
    *)
        main
        ;;
esac