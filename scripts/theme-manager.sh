#!/bin/bash

# Theme Manager Script
# Auto-generated by Arch Linux Hyprland Setup Script

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="$HOME/.config"
WALLPAPER_DIR="$HOME/Pictures/Wallpapers"
THEMES_DIR="$SCRIPT_DIR/../themes"
MATUGEN_CONFIG="$CONFIG_DIR/matugen/config.toml"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Print functions
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}$1${NC}"
    echo "$(printf '=%.0s' {1..60})"
}

print_usage() {
    echo "Theme Manager for Hyprland Desktop Environment"
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  apply-default              Apply default theme"
    echo "  apply <wallpaper>          Apply theme from wallpaper"
    echo "  set-wallpaper <path>       Set wallpaper without theme change"
    echo "  list-wallpapers            List available wallpapers"
    echo "  generate <wallpaper>       Generate theme from wallpaper"
    echo "  reload                     Reload all theme-related services"
    echo "  backup                     Backup current theme"
    echo "  restore <backup>           Restore theme from backup"
    echo "  install-wallpaper <url>    Download and install wallpaper"
    echo "  create-theme <name>        Create custom theme template"
    echo ""
    echo "Examples:"
    echo "  $0 apply ~/Pictures/Wallpapers/mountain.jpg"
    echo "  $0 generate ~/Downloads/new-wallpaper.png"
    echo "  $0 install-wallpaper https://example.com/wallpaper.jpg"
}

# Check dependencies
check_dependencies() {
    local deps=("matugen" "hyprctl" "hyprpaper")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        print_error "Missing dependencies: ${missing[*]}"
        print_info "Please install missing dependencies and try again"
        exit 1
    fi
}

# Apply default theme
apply_default_theme() {
    print_info "Applying default theme..."
    
    local default_wallpaper="$WALLPAPER_DIR/default-wallpaper.svg"
    
    if [ ! -f "$default_wallpaper" ]; then
        print_error "Default wallpaper not found: $default_wallpaper"
        return 1
    fi
    
    apply_theme_from_wallpaper "$default_wallpaper"
}

# Apply theme from wallpaper
apply_theme_from_wallpaper() {
    local wallpaper_path="$1"
    
    if [ ! -f "$wallpaper_path" ]; then
        print_error "Wallpaper not found: $wallpaper_path"
        return 1
    fi
    
    print_info "Applying theme from: $(basename "$wallpaper_path")"
    
    # Generate color scheme with Matugen
    if ! matugen image "$wallpaper_path" > /dev/null 2>&1; then
        print_error "Failed to generate color scheme from wallpaper"
        return 1
    fi
    
    # Set wallpaper
    set_wallpaper "$wallpaper_path"
    
    # Reload services
    reload_services
    
    print_success "Theme applied successfully"
}

# Set wallpaper
set_wallpaper() {
    local wallpaper_path="$1"
    
    if [ ! -f "$wallpaper_path" ]; then
        print_error "Wallpaper not found: $wallpaper_path"
        return 1
    fi
    
    print_info "Setting wallpaper: $(basename "$wallpaper_path")"
    
    # Update hyprpaper config
    local hyprpaper_config="$CONFIG_DIR/hypr/hyprpaper.conf"
    
    if [ -f "$hyprpaper_config" ]; then
        # Update existing config
        sed -i "s|preload = .*|preload = $wallpaper_path|g" "$hyprpaper_config"
        sed -i "s|wallpaper = .*|wallpaper = ,$wallpaper_path|g" "$hyprpaper_config"
    else
        # Create new config
        cat > "$hyprpaper_config" << EOF
preload = $wallpaper_path
wallpaper = ,$wallpaper_path
splash = false
ipc = on
EOF
    fi
    
    # Set wallpaper via hyprctl
    if pgrep -x "hyprpaper" > /dev/null; then
        hyprctl hyprpaper preload "$wallpaper_path"
        hyprctl hyprpaper wallpaper ",$wallpaper_path"
    else
        # Start hyprpaper if not running
        hyprpaper &
        sleep 2
        hyprctl hyprpaper wallpaper ",$wallpaper_path"
    fi
    
    print_success "Wallpaper set successfully"
}

# List available wallpapers
list_wallpapers() {
    print_header "Available Wallpapers"
    
    if [ ! -d "$WALLPAPER_DIR" ]; then
        print_warning "Wallpaper directory not found: $WALLPAPER_DIR"
        return
    fi
    
    local count=0
    for wallpaper in "$WALLPAPER_DIR"/*; do
        if [ -f "$wallpaper" ]; then
            local filename=$(basename "$wallpaper")
            local size=$(du -h "$wallpaper" | cut -f1)
            local dimensions=""
            
            # Get image dimensions if possible
            if command -v identify &> /dev/null; then
                dimensions=$(identify "$wallpaper" 2>/dev/null | cut -d' ' -f3 || echo "unknown")
            fi
            
            printf "%-30s %-10s %-15s\n" "$filename" "$size" "$dimensions"
            ((count++))
        fi
    done
    
    echo ""
    print_info "Total wallpapers: $count"
}

# Generate theme from wallpaper
generate_theme() {
    local wallpaper_path="$1"
    
    if [ ! -f "$wallpaper_path" ]; then
        print_error "Wallpaper not found: $wallpaper_path"
        return 1
    fi
    
    print_info "Generating theme from: $(basename "$wallpaper_path")"
    
    # Create backup of current theme
    backup_current_theme
    
    # Generate with Matugen
    if matugen image "$wallpaper_path"; then
        print_success "Theme generated successfully"
        print_info "Use 'reload' command to apply changes"
    else
        print_error "Failed to generate theme"
        return 1
    fi
}

# Reload services
reload_services() {
    print_info "Reloading theme-related services..."
    
    # Reload Hyprland configuration
    if pgrep -x "Hyprland" > /dev/null; then
        hyprctl reload
        print_info "✓ Hyprland configuration reloaded"
    fi
    
    # Restart Waybar
    if pgrep -x "waybar" > /dev/null; then
        pkill waybar
        sleep 1
    fi
    
    waybar -c "$CONFIG_DIR/waybar/config-primary.jsonc" -s "$CONFIG_DIR/waybar/style.css" &
    waybar -c "$CONFIG_DIR/waybar/config-secondary.jsonc" -s "$CONFIG_DIR/waybar/style.css" &
    print_info "✓ Waybar restarted"
    
    # Restart Mako
    if pgrep -x "mako" > /dev/null; then
        pkill mako
        sleep 1
    fi
    
    mako &
    print_info "✓ Mako restarted"
    
    # Restart hyprpaper if needed
    if ! pgrep -x "hyprpaper" > /dev/null; then
        hyprpaper &
        print_info "✓ Hyprpaper started"
    fi
    
    print_success "All services reloaded"
}

# Backup current theme
backup_current_theme() {
    local backup_dir="$HOME/.theme-backups"
    local timestamp=$(date +%Y%m%d-%H%M%S)
    local backup_path="$backup_dir/theme-$timestamp"
    
    print_info "Creating theme backup..."
    
    mkdir -p "$backup_path"
    
    # Backup configuration files
    local config_files=(
        "hypr/colors.conf"
        "waybar/colors.css"
        "fish/colors.fish"
        "kitty/colors.conf"
        "mako/colors.conf"
        "wofi/colors.css"
        "matugen/colors.json"
    )
    
    for file in "${config_files[@]}"; do
        if [ -f "$CONFIG_DIR/$file" ]; then
            mkdir -p "$backup_path/$(dirname "$file")"
            cp "$CONFIG_DIR/$file" "$backup_path/$file"
        fi
    done
    
    # Save current wallpaper info
    if pgrep -x "hyprpaper" > /dev/null; then
        hyprctl hyprpaper listloaded > "$backup_path/wallpaper_info.txt" 2>/dev/null || echo "No wallpaper info" > "$backup_path/wallpaper_info.txt"
    fi
    
    print_success "Theme backup created: $backup_path"
}

# Restore theme from backup
restore_theme() {
    local backup_path="$1"
    
    if [ ! -d "$backup_path" ]; then
        print_error "Backup not found: $backup_path"
        return 1
    fi
    
    print_info "Restoring theme from: $(basename "$backup_path")"
    
    # Restore configuration files
    for file in "$backup_path"/*; do
        if [ -f "$file" ]; then
            local relative_path="${file#$backup_path/}"
            if [ "$relative_path" != "wallpaper_info.txt" ]; then
                mkdir -p "$CONFIG_DIR/$(dirname "$relative_path")"
                cp "$file" "$CONFIG_DIR/$relative_path"
            fi
        fi
    done
    
    # Reload services
    reload_services
    
    print_success "Theme restored successfully"
}

# Install wallpaper from URL
install_wallpaper() {
    local url="$1"
    local filename=$(basename "$url")
    local output_path="$WALLPAPER_DIR/$filename"
    
    print_info "Downloading wallpaper: $filename"
    
    mkdir -p "$WALLPAPER_DIR"
    
    if curl -L -o "$output_path" "$url"; then
        print_success "Wallpaper downloaded: $output_path"
        print_info "Use 'apply $output_path' to set as wallpaper"
    else
        print_error "Failed to download wallpaper"
        return 1
    fi
}

# Create custom theme template
create_theme_template() {
    local theme_name="$1"
    local template_dir="$THEMES_DIR/$theme_name"
    
    print_info "Creating theme template: $theme_name"
    
    mkdir -p "$template_dir"
    
    # Create basic theme configuration
    cat > "$template_dir/theme.conf" << EOF
# Custom Theme: $theme_name
# Created: $(date)

[colors]
background = "#1e1e2e"
foreground = "#cdd6f4"
accent = "#89b4fa"
secondary = "#b4befe"
success = "#a6e3a1"
warning = "#f9e2af"
error = "#f38ba8"

[settings]
border_radius = 12
gap_size = 8
opacity = 0.9
EOF
    
    print_success "Theme template created: $template_dir"
    print_info "Edit $template_dir/theme.conf to customize the theme"
}

# Get current wallpaper
get_current_wallpaper() {
    if pgrep -x "hyprpaper" > /dev/null; then
        hyprctl hyprpaper listloaded 2>/dev/null | head -n1 || echo "No wallpaper set"
    else
        echo "Hyprpaper not running"
    fi
}

# Show theme status
show_status() {
    print_header "Theme Status"
    
    echo "Current wallpaper: $(get_current_wallpaper)"
    echo ""
    
    # Show running services
    echo "Running services:"
    pgrep -x "Hyprland" > /dev/null && echo "  ✓ Hyprland" || echo "  ✗ Hyprland"
    pgrep -x "waybar" > /dev/null && echo "  ✓ Waybar" || echo "  ✗ Waybar"
    pgrep -x "mako" > /dev/null && echo "  ✓ Mako" || echo "  ✗ Mako"
    pgrep -x "hyprpaper" > /dev/null && echo "  ✓ Hyprpaper" || echo "  ✗ Hyprpaper"
    echo ""
    
    # Show configuration files
    echo "Configuration files:"
    local config_files=(
        "hypr/colors.conf"
        "waybar/colors.css"
        "fish/colors.fish"
        "matugen/colors.json"
    )
    
    for file in "${config_files[@]}"; do
        if [ -f "$CONFIG_DIR/$file" ]; then
            echo "  ✓ $file"
        else
            echo "  ✗ $file (missing)"
        fi
    done
}

# Main function
main() {
    # Check dependencies
    check_dependencies
    
    case "${1:-}" in
        apply-default)
            apply_default_theme
            ;;
        apply)
            if [ -z "${2:-}" ]; then
                print_error "Please specify wallpaper path"
                exit 1
            fi
            apply_theme_from_wallpaper "$2"
            ;;
        set-wallpaper)
            if [ -z "${2:-}" ]; then
                print_error "Please specify wallpaper path"
                exit 1
            fi
            set_wallpaper "$2"
            ;;
        list-wallpapers)
            list_wallpapers
            ;;
        generate)
            if [ -z "${2:-}" ]; then
                print_error "Please specify wallpaper path"
                exit 1
            fi
            generate_theme "$2"
            ;;
        reload)
            reload_services
            ;;
        backup)
            backup_current_theme
            ;;
        restore)
            if [ -z "${2:-}" ]; then
                print_error "Please specify backup path"
                exit 1
            fi
            restore_theme "$2"
            ;;
        install-wallpaper)
            if [ -z "${2:-}" ]; then
                print_error "Please specify wallpaper URL"
                exit 1
            fi
            install_wallpaper "$2"
            ;;
        create-theme)
            if [ -z "${2:-}" ]; then
                print_error "Please specify theme name"
                exit 1
            fi
            create_theme_template "$2"
            ;;
        status)
            show_status
            ;;
        --help|-h|help)
            print_usage
            ;;
        *)
            print_error "Invalid command: ${1:-}"
            echo ""
            print_usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
