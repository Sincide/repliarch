# Custom Fish Prompt
# Auto-generated by Arch Linux Hyprland Setup Script

function fish_prompt --description 'Custom prompt for Hyprland environment'
    # Save the return status of the previous command
    set -l last_pipestatus $pipestatus
    set -lx __fish_last_status $status # Export for __fish_print_pipestatus

    # Colors
    set -l normal (set_color normal)
    set -l magenta (set_color magenta)
    set -l yellow (set_color yellow)
    set -l green (set_color green)
    set -l red (set_color red)
    set -l gray (set_color -o black)
    set -l blue (set_color blue)
    set -l cyan (set_color cyan)

    # Color the prompt differently when we're root
    set -l color_cwd $green
    set -l suffix '‚ùØ'
    if functions -q fish_is_root_user; and fish_is_root_user
        if set -q fish_color_cwd_root
            set color_cwd $fish_color_cwd_root
        else
            set color_cwd $red
        end
        set suffix '#'
    end

    # Write pipestatus
    # If the status was carried over (if no command is issued or if `set` leaves the status untouched), don't bold it
    set -l bold_flag --bold
    set -q __fish_prompt_status_generation; or set -g __fish_prompt_status_generation $status_generation
    if test $__fish_prompt_status_generation = $status_generation
        set bold_flag
    end
    set __fish_prompt_status_generation $status_generation
    set -l status_color (set_color $fish_color_status)
    set -l statusb_color (set_color $bold_flag $fish_color_status)
    set -l prompt_status (__fish_print_pipestatus "[" "]" "|" "$status_color" "$statusb_color" $last_pipestatus)

    # Get current directory
    set -l pwd_info (pwd)
    set -l cwd (basename $pwd_info)
    
    # Replace home directory with ~
    if string match -q "$HOME*" $pwd_info
        set pwd_info (string replace $HOME '~' $pwd_info)
    end

    # Truncate long paths
    if test (string length $pwd_info) -gt 40
        set -l parts (string split '/' $pwd_info)
        if test (count $parts) -gt 3
            set pwd_info (string join '/' $parts[1] '...' $parts[-1])
        end
    end

    # Git information
    set -l git_info ""
    if command -sq git
        set -l git_branch (git branch --show-current 2>/dev/null)
        if test -n "$git_branch"
            set -l git_status (git status --porcelain 2>/dev/null)
            set -l git_color $green
            set -l git_symbol "◊©◊Ç"
            
            if test -n "$git_status"
                set git_color $yellow
                set git_symbol "◊©◊Å"
                
                # Check for untracked files
                if string match -q "??" "$git_status"
                    set git_color $red
                    set git_symbol "?"
                end
            end
            
            set git_info " $git_color$git_symbol $git_branch$normal"
        end
    end

    # User and hostname info
    set -l user_info ""
    if test "$USER" != (whoami)
        set user_info "$magenta$USER$gray@$yellow"(hostname -s)"$normal "
    end

    # Python virtual environment
    set -l venv_info ""
    if set -q VIRTUAL_ENV
        set venv_info " $blue("(basename $VIRTUAL_ENV)")$normal"
    end

    # Node.js version if nvm is available
    set -l node_info ""
    if command -sq node
        set -l node_version (node --version 2>/dev/null | string replace 'v' '')
        if test -n "$node_version"
            set node_info " $cyan‚¨¢ $node_version$normal"
        end
    end

    # Time stamp
    set -l time_info "$gray["(date +%H:%M)"]$normal"

    # Battery info for laptops
    set -l battery_info ""
    if test -f /sys/class/power_supply/BAT0/capacity
        set -l battery_level (cat /sys/class/power_supply/BAT0/capacity)
        set -l battery_status (cat /sys/class/power_supply/BAT0/status)
        set -l battery_color $green
        set -l battery_icon "üîã"
        
        if test $battery_level -lt 20
            set battery_color $red
            set battery_icon "ü™´"
        else if test $battery_level -lt 50
            set battery_color $yellow
        end
        
        if test "$battery_status" = "Charging"
            set battery_icon "‚ö°"
        end
        
        set battery_info " $battery_color$battery_icon $battery_level%$normal"
    end

    # Memory usage (if available)
    set -l mem_info ""
    if command -sq free
        set -l mem_percent (free | awk 'NR==2{printf "%.0f", $3*100/$2}')
        if test $mem_percent -gt 80
            set mem_info " $redüß† $mem_percent%$normal"
        else if test $mem_percent -gt 60
            set mem_info " $yellowüß† $mem_percent%$normal"
        end
    end

    # Check if in SSH session
    set -l ssh_info ""
    if set -q SSH_TTY; or set -q SSH_CLIENT; or set -q SSH_CONNECTION
        set ssh_info " $magenta[SSH]$normal"
    end

    # Container/environment detection
    set -l env_info ""
    if test -f /.dockerenv
        set env_info " $blue[üê≥ Docker]$normal"
    else if set -q CONTAINER_ID
        set env_info " $blue[üì¶ Container]$normal"
    end

    # First line: user@host [time] ssh/env info
    if test -n "$user_info$ssh_info$env_info"
        printf '%s%s%s%s\n' $user_info $time_info $ssh_info $env_info
    end

    # Second line: directory, git, venv, node, battery, memory
    printf '%s%s%s%s%s%s%s%s' \
        $color_cwd $pwd_info $normal \
        $git_info \
        $venv_info \
        $node_info \
        $battery_info \
        $mem_info

    # Third line: status and prompt
    printf '%s\n%s%s%s ' $prompt_status $color_cwd $suffix $normal
end
